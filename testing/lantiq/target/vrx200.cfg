reset_config trst_only
#adapter_nsrst_assert_width 100
adapter_nsrst_delay 100
#jtag_ntrst_assert_width 100
jtag_ntrst_delay 100

set CHIPNAME vrx200
jtag newtap $CHIPNAME cpu0 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x1183
jtag newtap $CHIPNAME cpu1 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x183

set TARGETNAME $CHIPNAME.cpu1
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

$TARGETNAME configure -work-area-phys 0x1e220000 -work-area-size 0x10000 -work-area-backup 0

proc vrx200_cgu_init {} {
    echo "VRX200: CGU init"

    # CGU for speed 500/250
    mww 0xBF10300c 0x12
    mww 0xBF103010 0x03020000

    # CGU update
    mww 0xBF103020 0x01
}

proc vrx200_mc_init_prepare {} {
    echo "VRX200: MC init prepare"

    # halt MC
    mww 0xBF401070 0x0

    # programm MC settings
    mww 0xBF401000 	0x101
    mww 0xBF401010 	0x1000100
    mww 0xBF401020 	0x1010000
    mww 0xBF401030 	0x100
    mww 0xBF401040 	0x1000000
    mww 0xBF401050 	0x1000101
    mww 0xBF401060 	0x1000100
    mww 0xBF401070 	0x1010000
    mww 0xBF401080 	0x1000101
    mww 0xBF401090 	0x0
    mww 0xBF4010A0 	0x2000100
    mww 0xBF4010B0 	0x2000401
    mww 0xBF4010C0 	0x30000
    mww 0xBF4010D0 	0x202
    mww 0xBF4010E0 	0x7080A0F
    mww 0xBF4010F0 	0x2040F
    mww 0xBF401100 	0x40000
    mww 0xBF401110 	0x70102
    mww 0xBF401120 	0x4020002
    mww 0xBF401130 	0x30302
    mww 0xBF401140 	0x8000700
    mww 0xBF401150 	0x40F020A
    mww 0xBF401160 	0x0
    mww 0xBF401170 	0xC020000
    mww 0xBF401180 	0x4401B04
    mww 0xBF401190 	0x0
    mww 0xBF4011A0 	0x0
    mww 0xBF4011B0 	0x6420000
    mww 0xBF4011C0 	0x0
    mww 0xBF4011D0 	0x0
    mww 0xBF4011E0 	0x798
    mww 0xBF4011F0 	0x0
    mww 0xBF401200 	0x0
    mww 0xBF401210 	0x650000
    mww 0xBF401220 	0x200C8
    mww 0xBF401230 	0x1D445D
    mww 0xBF401240 	0xC8
    mww 0xBF401250 	0xC351
    mww 0xBF401260 	0x0
    mww 0xBF401270 	0x141F04
    mww 0xBF401280 	0x142704
    mww 0xBF401290 	0x141b42
    mww 0xBF4012A0 	0x141b42
    mww 0xBF4012B0 	0x566504
    mww 0xBF4012C0 	0x566504
    mww 0xBF4012D0 	0x565F17
    mww 0xBF4012E0 	0x565F17
    mww 0xBF4012F0 	0x0
    mww 0xBF401300 	0x0
    mww 0xBF401310 	0x0
    mww 0xBF401320 	0x0
    mww 0xBF401330 	0x0
    mww 0xBF401340 	0x133
    mww 0xBF401350 	0xF3014B27
    mww 0xBF401360 	0xF3014B27
    mww 0xBF401370 	0xF3014B27
    mww 0xBF401380 	0xF3014B27
    mww 0xBF401390 	0x7C00301
    mww 0xBF4013A0 	0x7C00301
    mww 0xBF4013B0 	0x7C00301
    mww 0xBF4013C0 	0x7C00301
    mww 0xBF4013D0 	0x4
}

proc vrx200_mc_init_finish {} {
    echo "VRX200: MC init finish"

    # start MC
    mww 0xBF401070 0x1010100

    # wait for DLL lock
    sleep 200
}

proc vrx200_ebu_init {} {
    echo "VRX200: EBU init"

# Single flash configuration
    #mww 0xbe105360 0x0001f7ff
    #mww 0xbe105320 0x10000011

# Dual flash configuration
    mww 0xbe105360 0x0001e7ff
    mww 0xbe105320 0x10000031
    mww 0xbe105364 0x0001e7ff
    mww 0xbe105324 0x14000031
}

proc vrx200_ebu_swap_enable {} {
    echo "VRX200: EBU swap enable"

# Single flash configuration
    #mww 0xbe105360 0x4001f7ff

# Dual flash configuration
    mww 0xbe105360 0x4001e7ff
    mww 0xbe105364 0x4001e7ff
}

proc vrx200_ebu_swap_disable {} {
    echo "VRX200: EBU swap disable"

# Single flash configuration
    #mww 0xbe105360 0x0001f7ff

# Dual flash configuration
    mww 0xbe105360 0x0001e7ff
    mww 0xbe105364 0x0001e7ff
}

proc vrx200_hrst {} {
    echo "VRX200: HRST"

    # Assert HRST
    mww 0xBF203010 0x21
    sleep 800
    mww 0xBF203010 0x20
    sleep 10
}

proc vrx200_gdb_attach {} {
    echo "VRX200: gdb-attach"

    reset halt
    vrx200_ebu_init
    #vrx200_ebu_swap_enable
    #flash probe 0
    #vrx200_ebu_swap_disable
}

$TARGETNAME configure -event gdb-attach { vrx200_gdb_attach }
