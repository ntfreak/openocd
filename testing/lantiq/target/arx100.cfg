reset_config trst_only
#adapter_nsrst_assert_width 100
adapter_nsrst_delay 100
#jtag_ntrst_assert_width 100
jtag_ntrst_delay 100

set CHIPNAME arx100
jtag newtap $CHIPNAME cpu0 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x1183
jtag newtap $CHIPNAME cpu1 -irlen 5  -ircapture 0x1 -irmask 0x1f -expected-id 0x183

set TARGETNAME $CHIPNAME.cpu1
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

set FLASHNAME $CHIPNAME.nor0
flash bank $FLASHNAME cfi 0xb0000000 0x4000000 2 2 $TARGETNAME

$TARGETNAME configure -work-area-phys 0x1e1a0000 -work-area-size 0x10000 -work-area-backup 0

proc arx100_cgu_init {} {
    echo "ARX100: CGU init"

    # CGU for CPU 333Mhz, DDR 167Mhz
    mww 0xbf103010 0x80

    # CGU update
    mww 0xBF103014 0x01
}

proc arx100_mc_init_prepare {} {
    echo "ARX100: MC init prepare"

    # Clear error access log registers
    mww 0xbf800010 0x0
    mww 0xbf800020 0x0

    # Enable FPI, DDR and SRAM module in memory controller
    mww 0xbf800060 0xd

    # Clear start bit of DDR memory controller
	mww 0xbf801030 0x0

    # DDR Register

}

proc arx100_mc_init_finish {} {
    echo "ARX100: MC init finish"

    # Set start bit of DDR memory controller
	mww 0xbf801030 0x100

    # wait for DLL lock
    sleep 200
}

proc arx100_ebu_init {} {
    echo "ARX100: EBU init"

    mww 0xbe105360 0x0001f7ff
    mww 0xbe105320 0x10000011
}

proc arx100_ebu_swap_enable {} {
    echo "ARX100: EBU swap enable"

    mww 0xbe105360 0x4001f7ff
}

proc arx100_ebu_swap_disable {} {
    echo "ARX100: EBU swap disable"

    mww 0xbe105360 0x0001f7ff
}

proc arx100_gdb_attach {} {
    echo "ARX100: gdb-attach"

    reset halt
    arx100_ebu_init
    #arx100_ebu_swap_enable
    #flash probe 0
    #arx100_ebu_swap_disable
}

$TARGETNAME configure -event gdb-attach { arx100_gdb_attach }
