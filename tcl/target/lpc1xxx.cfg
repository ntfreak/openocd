# Main file for NXP LPC1xxx series Cortex-M0/0+/3 parts
#
# !!!!!!
#
# This file should not be included directly, rather by the lpc1114.cfg,
# lpc1343.cfg, lpc1768.cfg, etc. which set the needed variables to the
# appropriate values.
#
# !!!!!!

# LPC11xx chips support only SWD transport.
# LPC12xx chips support only SWD transport.
# LPC11Uxx chips support both JTAG and SWD transports.
# LPC13xx chips support both JTAG and SWD transports.
# LPC17xx chips support both JTAG and SWD transports.
# Adapt based on what transport is active.
source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	error "CHIPNAME not set. Please do not include lpc1xxx.cfg directly, but the specific chip configuration file (lpc1114.cfg, lpc1343.cfg, lpc1768.cfg, etc)."
}

if { [info exists CHIPSERIES] } {
	# Validate chip series is supported
	if { $CHIPSERIES != "lpc1100" && $CHIPSERIES != "lpc1200" && $CHIPSERIES != "lpc1300" && $CHIPSERIES != "lpc1700" } {
		error "Unsupported LPC1xxx chip series specified."
	}
	set _CHIPSERIES $CHIPSERIES
} else {
	error "CHIPSERIES not set. Please do not include lpc1xxx.cfg directly, but the specific chip configuration file (lpc1114.cfg, lpc1343.cfg, lpc1768.cfg, etc)."
}

# After reset, the chip is clocked by an internal RC oscillator.
# When board-specific code (reset-init handler or device firmware)
# configures another oscillator and/or PLL0, set CCLK to match; if
# you don't, then flash erase and write operations may misbehave.
# (The ROM code doing those updates cares about core clock speed...)
# CCLK is the core clock frequency in KHz
if { [info exists CCLK] } {
	# Allow user override
	set _CCLK $CCLK
} else {
	# LPC11xx/LPC12xx/LPC13xx use a 12MHz one, LPC17xx uses a 4MHz one
	if { $_CHIPSERIES == "lpc1100" || $_CHIPSERIES == "lpc1200" || $_CHIPSERIES == "lpc1300" } {
		set _CCLK 12000
	} else if { $_CHIPSERIES == "lpc1700" } {
		set _CCLK 4000
	}
}

if { [info exists CPUTAPID] } {
	# Allow user override
	set _CPUTAPID $CPUTAPID
} else {
	# LPC11xx/LPC12xx uses a Cortex M0 core, LPC13xx/LPC17xx use a Cortex M3 core
	if { $_CHIPSERIES == "lpc1100" || $_CHIPSERIES == "lpc1200" } {
		set _CPUTAPID 0x0bb11477
	} else if { $_CHIPSERIES == "lpc1300" || $_CHIPSERIES == "lpc1700" } {
		set _CPUTAPID 0x4ba00477
	}
}

if { [info exists CPURAMSIZE] } {
	set _CPURAMSIZE $CPURAMSIZE
} else {
	error "CPURAMSIZE not set. Please do not include lpc1xxx.cfg directly, but the specific chip configuration file (lpc1114.cfg, lpc1343.cfg, lpc1768.cfg, etc)."
}

if { [info exists CPUROMSIZE] } {
	set _CPUROMSIZE $CPUROMSIZE
} else {
	error "CPUROMSIZE not set. Please do not include lpc1xxx.cfg directly, but the specific chip configuration file (lpc1114.cfg, lpc1343.cfg, lpc1768.cfg, etc)."
}

if { [info exists TRANSPORT] } {
	# Select a special transport if it is explicitly defined (e.g. hla_swd)
	set _TRANSPORT $TRANSPORT
	transport select $_TRANSPORT
} else {
	set _TRANSPORT jtag
}

if { $_TRANSPORT == "hla_swd" } {
	hla newtap $_CHIPNAME cpu -expected-id $_CPUTAPID
	set _TARGETTYPE hla_target
	# Update swj-dp's using_jtag global (FIXME)
	set using_jtag 0
} else {
	swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID
	set _TARGETTYPE cortex_m
}

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME $_TARGETTYPE -chain-position $_TARGETNAME

# The LPC11xx devices have 2/4/8kB of SRAM in the ARMv7-M "Code" area (at 0x10000000)
# The LPC12xx devices have 4/8kB of SRAM in the ARMv7-M "Code" area (at 0x10000000)
# The LPC11Uxx devices have 4/6/8kB of SRAM in the ARMv7-M "Code" area (at 0x10000000)
# The LPC13xx devices have 4/8kB of SRAM in the ARMv7-M "Code" area (at 0x10000000)
# The LPC17xx devices have 8/16/32kB of SRAM in the ARMv7-M "Code" area (at 0x10000000)
$_TARGETNAME configure -work-area-phys 0x10000000 -work-area-size $_CPURAMSIZE

# The LPC11xx devies have 8/16/24/32/48/56/64kB of flash memory (at 0x00000000)
# The LPC12xx devies have 32/48/64/80/96/128kB of flash memory (at 0x00000000)
# The LPC11Uxx devies have 16/24/32/40/48/64/96/128kB of flash memory (at 0x00000000)
# The LPC13xx devies have 8/16/32kB of flash memory (at 0x00000000)
# The LPC17xx devies have 32/64/128/256/512kB of flash memory (at 0x00000000)
#
# All are compatible with the "lpc1700" variant of the LPC2000 flash driver
# (same cmd51 destination boundary alignment, and all three support 256 byte
# transfers).
#
# flash bank <name> lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc checksum]
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME lpc2000 0x0 $_CPUROMSIZE 0 0 $_TARGETNAME \
	lpc1700 $_CCLK calc_checksum

if { $_CHIPSERIES == "lpc1100" || $_CHIPSERIES == "lpc1200" || $_CHIPSERIES == "lpc1300" } {
	# Do not remap 0x0000-0x0200 to anything but the flash (i.e. select
	# "User Flash Mode" where interrupt vectors are _not_ remapped,
	# and reside in flash instead).
	#
	# Table 8. System memory remap register (SYSMEMREMAP, address 0x4004 8000) bit description
	# Bit Symbol Value Description
	# 1:0 MAP          System memory remap
	#            0x0   Boot Loader Mode. Interrupt vectors are re-mapped to Boot ROM.
	#            0x1   User RAM Mode. Interrupt vectors are re-mapped to Static RAM.
	#            0x2   User Flash Mode. Interrupt vectors are not re-mapped and reside in Flash.
	# 31:2 -     -     Reserved.
	set _SYSMEMMAP_ADDRESS 0x40048000
	set _SYSMEMMAP_VALUE 0x02
} else if { $_CHIPSERIES == "lpc1700" } {
	# Do not remap 0x0000-0x0020 to anything but the flash (i.e. select
	# "User Flash Mode" where interrupt vectors are _not_ remapped,
	# and reside in flash instead).
	#
	# See Table 612. Memory Mapping Control register (MEMMAP - 0x400F C040) bit description
	# Bit Symbol Value Description Reset
	# value
	# 0 MAP Memory map control. 0
	# 0 Boot mode. A portion of the Boot ROM is mapped to address 0.
	# 1 User mode. The on-chip Flash memory is mapped to address 0.
	# 31:1 - Reserved. The value read from a reserved bit is not defined. NA
	#
	# http://ics.nxp.com/support/documents/microcontrollers/?scope=LPC1768&type=user
	set _SYSMEMMAP_ADDRESS 0x400FC040
	set _SYSMEMMAP_VALUE 0x01
}

# Run with *real slow* clock by default since the
# boot rom could have been playing with the PLL, so
# we have no idea what clock the target is running at.
adapter_khz 10

# delays on reset lines
adapter_nsrst_delay 200
if {$using_jtag} {
 jtag_ntrst_delay 200
}

$_TARGETNAME configure -event reset-init {
	mww $_SYSMEMMAP_ADDRESS $_SYSMEMMAP_VALUE
}

# LPC11xx/LPC12xx (Cortex M0 core) supports SYSRESETREQ
# LPC13xx/LPC17xx (Cortex M3 core) supports SYSRESETREQ
#
# If we're using a low-level cortex_m target, enable SYSRESETREQ reset
# configuration.
if { $_TARGETTYPE == "cortex_m" } {
	cortex_m reset_config sysresetreq
}
