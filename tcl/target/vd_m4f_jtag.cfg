# Cadence virtual debug interface
# Arm Cortex m4f through JTAG

source [find interface/vdebug.cfg]

# vdebug select JTAG transport 
transport select jtag
# JTAG reset config, frequency and reset delay
reset_config trst_and_srst
adapter speed 25000
adapter srst delay 5

# target specific data
set _CHIPNAME m4f
set _MEMSTART 0x20000000
set _MEMSIZE 0x100000
set _CPUTAPID 0x4ba00477
set _TARGETNAME $_CHIPNAME.cpu

# BFM hierarchical path and input clk period
bfm_path tbench.u_vd_jtag_bfm 20ns
# DMA Memories to access backdoor (up to 3)
mem_path tbench.u_mcu.u_sys.u_rom.rom 0x0 $_MEMSIZE
mem_path tbench.u_mcu.u_sys.u_ram.ram $_MEMSTART $_MEMSIZE

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

jtag arp_init-reset

dap create $_CHIPNAME.dap -chain-position $_TARGETNAME

target create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap

# register vdebug routines
# register_target_poll takes two values, the first is used when any core is stopped,
# the other when running. Both represent the duration of wait in target clock cycles,
# lower values mean faster debugger responsiveness, but lower emulation performance
# few thousands are good for simulated target, hundred thousands are for emulation
# they should be adjusted such that poll completes in ~100ms when stopped and <1s when running
# register_target_dma activates the backdoor memory access for memories specified with mem_path
proc vdebug_examine_end {} {
    register_target_poll 20000 5000
    register_target_dma
}

# Default hooks
$_TARGETNAME configure -event examine-end { vdebug_examine_end }
$_TARGETNAME configure -work-area-phys $_MEMSTART -work-area-size $_MEMSIZE -work-area-backup 0
