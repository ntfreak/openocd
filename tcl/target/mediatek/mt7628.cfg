#
# The MediaTek MT7628 is a highly integrated 2T2R 802.11n wireless network
# router SoC.
#
# Product page:
# https://www.mediatek.com/products/homeNetworking/mt7628k-n-a
#
# Specifications:
# - MIPS24KEc @ 575/580 MHz
# - 64KB I-Cache and 32KB D-Cache
#
# Note:
# This configuration also applies to MediaTek MT7688
#

source [find target/mediatek/mmio.tcl]
source [find target/mediatek/memc.tcl]

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME mt7628
}

jtag newtap ${_CHIPNAME} cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x1762824f

set _TARGETNAME $_CHIPNAME.cpu

target create ${_TARGETNAME}0 mips_m4k -endian little -chain-position ${_CHIPNAME}.cpu

proc cpu_pll_init {} {
    set _rom_normal 0
    set check_count 1000

    while {$_rom_normal == 0 && $check_count != 0} {
        set _rom_normal [expr [mmio_read_32 0xb0000028] & 1]
        set check_count [expr $check_count - 1]
        sleep 1
    }

    if { $_rom_normal != 0 } {
        # DIS_BBP_SLEEP, EN_BBP_CLK
        mmio_clrsetbits_32 0xb000002c 0x3 0xc
    } else {
        # CPU_PLL_FROM_XTAL
        mmio_clrsetbits_32 0xb000002c 0x2 0x1
    }

    # Adjust CPU clock
    mmio_clrsetbits_32 0xb0000440 0x00000f0f 0x00000101
}

proc dram_init {size} {
    set ddr1_cfgs_8mb   { 0x34A1EB94 0x20262324 0x28000033 0x00000002 0x00000000 }
    set ddr1_cfgs_16mb  { 0x34A1EB94 0x202A2324 0x28000033 0x00000002 0x00000000 }
    set ddr1_cfgs_32mb  { 0x34A1E5CA 0x202E2324 0x28000033 0x00000002 0x00000000 }
    set ddr1_cfgs_64mb  { 0x3421E5CA 0x20322324 0x28000033 0x00000002 0x00000000 }
    set ddr1_cfgs_128mb { 0x241B05CA 0x20362334 0x28000033 0x00000002 0x00000000 }

    set ddr2_cfgs_32mb  { 0x2519E2E5 0x222E2323 0x68000C43 0x00000452 0x0000000A }
    set ddr2_cfgs_64mb  { 0x249AA2E5 0x22322323 0x68000C43 0x00000452 0x0000000A }
    set ddr2_cfgs_128mb { 0x249B42E5 0x22362323 0x68000C43 0x00000452 0x0000000A }
    set ddr2_cfgs_256mb { 0x249CE2E5 0x223A2323 0x68000C43 0x00000452 0x0000000A }

    set ddr_type [expr [mmio_read_32 0xb0000010] & 1]

    mmio_setbits_32 0xb0000034 0x400
    sleep 200
    mmio_clrbits_32 0xb0000034 0x400

    if { $ddr_type == 1 } {
        mww 0xb0001100 0x81c00000
        mww 0xb000110c 0x10060
        sleep 50
        mww 0xb000110c 0x50060
        mww 0xb0001104 0x5182
        mww 0xb0001704 0xc0c
        mww 0xb000170c 0x202
        mww 0xb0001710 0x60001000
        mww 0xb0001714 0x707
        mww 0xb0001718 0x60001000
        mww 0xb000171c 0xc0c

        if { $size == 8 } {
            ddr_init $ddr1_cfgs_8mb 0x8282 0x8383
        } elseif { $size == 16 } {
            ddr_init $ddr1_cfgs_16mb 0x8282 0x8383
        } elseif { $size == 32 } {
            ddr_init $ddr1_cfgs_32mb 0x8282 0x8383
        } elseif { $size == 64 } {
            ddr_init $ddr1_cfgs_64mb 0x8282 0x8383
        } elseif { $size == 128 } {
            ddr_init $ddr1_cfgs_128mb 0x8282 0x8383
        }
    } else {
        mww 0xb0001100 0x81c00000
        mww 0xb000110c 0x10020
        sleep 50
        mww 0xb000110c 0x50020
        mww 0xb0001104 0x5182
        mww 0xb0001704 0xc0c
        mww 0xb000170c 0x202
        mww 0xb0001710 0x60001000
        mww 0xb0001714 0x404
        mww 0xb0001718 0x60001000
        mww 0xb000171c 0xc0c

        if { $size == 32 } {
            ddr_init $ddr2_cfgs_32mb 0x8282 0x8383
        } elseif { $size == 64 } {
            ddr_init $ddr2_cfgs_64mb 0x8282 0x8383
        } elseif { $size == 128 } {
            ddr_init $ddr2_cfgs_128mb 0x8282 0x8383
        } elseif { $size == 256 } {
            ddr_init $ddr2_cfgs_256mb 0x8282 0x8383
        }
    }
}
