#
# Texas Instruments K3 devices:
# * AM654x: http://www.ti.com/lit/pdf/spruid7
#  Has 4 ARMV8 Cores and 2 R5 Cores and an M3
# * J721E: http://www.ti.com/lit/pdf/spruil1
#  Has 2 ARMV8 Cores and 6 R5 Cores and an M3
#

if { [info exists SOC] } {
	set _soc $SOC
} else {
	set _soc am654
}

# set V8_SMP_DEBUG to non 0 value in board if you'd like to use SMP debug
if { [info exists V8_SMP_DEBUG] } {
	set _v8_smp_debug $V8_SMP_DEBUG
} else {
	set _v8_smp_debug 0
}

# Set configuration for each SOC
switch $_soc {
	am654 {
		set _CHIPNAME am654
		set _K3_DAP_TAPID 0x0bb5a02f
		# J721E has 2 clusters of 2 cores of A53 each.
		set _armv8_cpu_name a53
		set _armv8_cores 4
		# J721E has 3 clusters of 2 cores of R5s each.
		set _r5_cores 2
		# M3 power-ap unlock offsets
		set _m3_ap_unlock_offsets {0xf0 0x50}
	}
	j721e {
		set _CHIPNAME j721e
		set _K3_DAP_TAPID 0x0bb6402f
		# J721E has 2 clusters of 2 cores of A53 each.
		set _armv8_cpu_name a72
		set _armv8_cores 2
		# J721E has 3 clusters of 2 cores of R5s each.
		set _r5_cores 6
		# M3 power-ap unlock offsets
		set _m3_ap_unlock_offsets {0xf0 0x44}
	}
	default {
		echo "'$_soc' is invalid!"
	}
}


jtag newtap $_CHIPNAME cpu -irlen 4 -expected-id $_K3_DAP_TAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu

set _CTINAME $_CHIPNAME.cti

# CM3 the very first processor.
set CM3_DWTBASE		{0xE0001000}
set CM3_CTIBASE		{0x3C016000}
set CM3_ETBBASE		{0x3C025000}
set CM3_TPIUBASE	{0x20004000}

# M3 is always present
cti create $_CTINAME.m3 -dap $_CHIPNAME.dap -ap-num 7 -ctibase [lindex $CM3_CTIBASE 0]
set _command "target create $_TARGETNAME.m3 cortex_m -dap $_CHIPNAME.dap -ap-num 7"
set _command "$_command -defer-examine"
eval $_command
$_TARGETNAME.m3 configure -event reset-assert { }

proc m3_up { args } {
	global _TARGETNAME
	global _CHIPNAME
	global _m3_ap_unlock_offsets

	# To access M3, we need to enable the JTAG access for the same.
	# Ensure Power-AP unlocked
	$_CHIPNAME.dap apreg 3 [lindex $_m3_ap_unlock_offsets 0] 0x00190000
	$_CHIPNAME.dap apreg 3 [lindex $_m3_ap_unlock_offsets 1] 0x00102098

	$_TARGETNAME.m3 arp_examine
}

# All the ARMV8s are the next processors.
#		   CL0,CORE0  CL0,CORE1  CL1,CORE0  CL1,CORE1
set ARMV8_DBGBASE {0x90410000 0x90510000 0x90810000 0x90910000}
set ARMV8_CTIBASE {0x90420000 0x90520000 0x90820000 0x90920000}
set ARMV8_PMUBASE {0x90430000 0x90530000 0x90830000 0x90930000}
set ARMV8_ETMBASE {0x90440000 0x90540000 0x90840000 0x90940000}

set _v8_smp_targets ""

for { set _core 0 } { $_core < $_armv8_cores } { incr _core } {

	cti create $_CTINAME.$_armv8_cpu_name.$_core -dap $_CHIPNAME.dap -ap-num 1 \
		-ctibase [lindex $ARMV8_CTIBASE $_core]

	set _command "target create $_TARGETNAME.$_armv8_cpu_name.$_core aarch64 -dap $_CHIPNAME.dap \
		-dbgbase [lindex $ARMV8_DBGBASE $_core] -cti $_CTINAME.$_armv8_cpu_name.$_core"

	# On K3, ARMV8s do not come up by default. examination will fail
	set _command "$_command -defer-examine"
	if { $_core != 0 } {
		set _v8_smp_targets "$_v8_smp_targets $_TARGETNAME.$_armv8_cpu_name.$_core"
	} else {
		set _v8_smp_targets "$_TARGETNAME.$_armv8_cpu_name.$_core"
	}

	eval $_command
}

# Setup ARMV8 proc commands based on CPU to prevent people confusing SoCs
set _armv8_up_cmd "$_armv8_cpu_name"_up
# Available if V8_SMP_DEBUG is set to non-zero value
set _armv8_smp_cmd "$_armv8_cpu_name"_smp

if { $_v8_smp_debug == 0 } {
	proc $_armv8_up_cmd { args } {
		global _TARGETNAME
		global _armv8_cpu_name
		foreach { _core } [set args] {
			$_TARGETNAME.$_armv8_cpu_name.$_core arp_examine
			$_TARGETNAME.$_armv8_cpu_name.$_core aarch64 dbginit
		}
	}
} else {
	proc $_armv8_smp_cmd { args } {
		global _TARGETNAME
		global _armv8_cores
		global _armv8_cpu_name
		global _v8_smp_targets
		for { set _core 0 } { $_core < $_armv8_cores } { incr _core } {
			$_TARGETNAME.$_armv8_cpu_name.$_core arp_examine
			$_TARGETNAME.$_armv8_cpu_name.$_core aarch64 dbginit
			$_TARGETNAME.$_armv8_cpu_name.$_core aarch64 smp on
		}
		# Set Default target are core 0
		targets $_TARGETNAME.$_armv8_cpu_name.0
	}

	# Declare SMP
	eval "target smp $_v8_smp_targets"
}

# And we add up the R5s
#	        (0)MCU 0   (1)MCU 1   (2)MAIN_0_0 (3)MAIN_0_1 (4)MAIN_1_0 (5)MAIN_1_1
set R5_DBGBASE {0x9d010000 0x9d012000 0x9d410000 0x9d412000 0x9d510000 0x9d512000}
set R5_CTIBASE {0x9d018000 0x9d019000 0x9d418000 0x9d419000 0x9d518000 0x9d519000}
set R5_ETMBASE {0x9d01c000 0x9d01d000 0x9d41c000 0x9d41d000 0x9d51c000 0x9d51d000}

for { set _core 0 } { $_core < $_r5_cores } { incr _core } {
	cti create $_CTINAME.r5.$_core -dap $_CHIPNAME.dap -ap-num 1 \
		-ctibase [lindex $R5_CTIBASE $_core]
	set _command "target create $_TARGETNAME.r5.$_core cortex_r4 -dap $_CHIPNAME.dap \
		-dbgbase [lindex $R5_DBGBASE $_core] -ap-num 1"
	# inactive core examination will fail - wait till startup of additional core
	set _command "$_command -defer-examine"

	eval $_command
}

if { $_r5_cores != 0 } {
	proc mcu_r5_up { args } {
		global _TARGETNAME
		set _base_core_id 0
		foreach { _core } [set args] {
			set _core [expr {$_core + $_base_core_id}]
			$_TARGETNAME.r5.$_core arp_examine
			$_TARGETNAME.r5.$_core cortex_r4 dbginit
		}
	}
}

if { $_r5_cores > 2 } {
	proc main0_r5_up { args } {
		global _TARGETNAME
		set _base_core_id 2
		foreach { _core } [set args] {
			set _core [expr {$_core + $_base_core_id}]
			$_TARGETNAME.r5.$_core arp_examine
			$_TARGETNAME.r5.$_core cortex_r4 dbginit
		}
	}
}

if { $_r5_cores > 4 } {
	proc main1_r5_up { args } {
		global _TARGETNAME
		set _base_core_id 4
		foreach { _core } [set args] {
			set _core [expr {$_core + $_base_core_id}]
			$_TARGETNAME.r5.$_core arp_examine
			$_TARGETNAME.r5.$_core cortex_r4 dbginit
		}
	}
}
