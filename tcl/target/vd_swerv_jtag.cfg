# Cadence virtual debug interface
# RISCV swerv core with Swerv through JTAG

source [find interface/vdebug.cfg]

# vdebug select JTAG transport 
transport select jtag
# JTAG reset config, frequency and reset delay
reset_config trst_and_srst
adapter speed 50000
adapter srst delay 5

# target specific data
set _CHIPNAME riscv
set _MEMSTART 0x00000000
set _MEMSIZE 0x10000
set _CPUTAPID 0x1000008b
set _TARGETNAME $_CHIPNAME.cpu

# BFM hierarchical path and input clk period
bfm_path tbench.u_vd_jtag_bfm 10ns
# DMA Memories to access backdoor (up to 3)
mem_path tbench.u_ahb_ic.mem $_MEMSTART $_MEMSIZE

# need to explicitely define riscv tap, autoprobing does not work for icapture != 0x01
jtag newtap $_CHIPNAME cpu -irlen 5 -ircapture 0x01 -irmask 0x1f -expected-id $_CPUTAPID

jtag arp_init-reset

target create $_TARGETNAME riscv -chain-position $_TARGETNAME -coreid 0x00

riscv set_reset_timeout_sec 120
riscv set_command_timeout_sec 120
# prefer to use sba for system bus access
riscv set_prefer_sba off

# register vdebug routines
# register_target_poll takes two values, the first is used when any core is stopped,
# the other when running. Both represent the duration of wait in target clock cycles,
# lower values mean faster debugger responsiveness, but lower emulation performance
# few thousands are good for simulated target, hundred thousands are for emulation
# they should be adjusted such that poll completes in ~100ms when stopped and <1s when running
# register_target_dma activates the backdoor memory access for memories specified with mem_path
proc vdebug_examine_end {} {
    register_target_poll 4000 6000
    register_target_dma
}

# Default hooks
$_TARGETNAME configure -event examine-end { vdebug_examine_end }
