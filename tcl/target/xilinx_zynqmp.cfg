#
# target configuration for
# Xilinx ZynqMP (UltraScale+ / A53)
#
if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME uscale
}

#
# DAP tap (Quard core A53)
#
if { [info exists DAP_TAPID] } {
    set _DAP_TAPID $DAP_TAPID
} else {
    set _DAP_TAPID 0x5ba00477
}

# CoreSight SoC-400 TAP
#
# Documents:
# Table 3-209: JTAG-DP register summary from ARM DDI0480F
# Table 2-6: DPv2 address map from ARM IHI0031C
# Section 6.2: Selecting and accessing an AP from ARM IHI0031C
jtag newtap $_CHIPNAME arm -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_DAP_TAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.arm

#
# Fused Zynq PS and PL (UltraScale+)
#
# PS Documents:
# Table 39-4: PS TAP Controller Instructions from Xilinx UG1085
#
# PL Documents:
# Table 6-2: JTAG Registers from from Xilinx UG570
# Table 6-3: UltraScale FPGA Boundary-Scan Instructions from Xilinx UG570
if { [info exists PS_TAPID] } {
    set _PS_TAPID $PS_TAPID
    jtag newtap $_CHIPNAME ps_pl -irlen 12 -ircapture 0x41 -irmask 0xfef -expected-id $_PS_TAPID
} else {
    # FPGA Programmable logic. Values take from Table 39-1 in UG1085:
    jtag newtap $_CHIPNAME ps_pl -irlen 12 -ircapture 0x41 -irmask 0xfef -ignore-version \
        -expected-id 0x04711093 \
        -expected-id 0x04710093 \
        -expected-id 0x04721093 \
        -expected-id 0x04720093 \
        -expected-id 0x04739093 \
        -expected-id 0x04730093 \
        -expected-id 0x04738093 \
        -expected-id 0x04740093 \
        -expected-id 0x04750093 \
        -expected-id 0x04759093 \
        -expected-id 0x04758093
}

pld device virtex2 $_CHIPNAME.ps_pl 1

# The PS TAP is selected by putting the address in the upper 6 bits of the IR,
# with the PL TAP getting 0x24.
proc ps_control {inst} {
  return [expr ($inst << 6) | 0x24]
}

# The PL TAP is selected by putting the address in the lower 6 bits of the IR,
# with the PS TAP getting 0x24.
proc pl_control {inst} {
  return [expr (0x24 << 6) | $inst]
}

# Returns the value of the CBR_DONE bit from the PS JTAG_STATUS DR
proc jtag_status_cbr_done {jtag_status} {
  # CBR_DONE = JTAG_STATUS[13]
  # Table 39-6: PS TAP Controller Status Register from UG1085
  return [expr ($jtag_status >> 13) & 0x1]
}

# Returns the value of the ARM_DAP bit from the PS JTAG_STATUS DR
proc jtag_status_arm_dap {jtag_status} {
  # ARM_DAP = JTAG_STATUS[3]
  # Table 39-6: PS TAP Controller Status Register from UG1085
  return [expr ($jtag_status >> 3) & 0x1]
}

# Returns the value of the PL_TAP bit from the PS JTAG_STATUS DR
proc jtag_status_pl_tap {jtag_status} {
  # PL_TAP = JTAG_STATUS[2]
  # Table 39-6: PS TAP Controller Status Register from UG1085
  return [expr ($jtag_status >> 2) & 0x1]
}


# When the Zynq US+ is first enabled, the PL TAPs and ARM DAP TAPs are not available
# on the JTAG chain.  If the security gates are disabled (e.g. PS_MODE flags are set
# for JTAG), then the PL and ARM DAP TAPs can be enabled by writing to the JTAG_CTRL
# register, per Table 39-5: PS TAP Controller JTAG Control Register from UG1085.
proc check_and_enable_taps {} {
  global _CHIPNAME

  set JTAG_STATUS 0x1F
  set JTAG_STATUS_WIDTH 32

  set JTAG_CTRL 0x20
  set JTAG_CTRL_WIDTH 32

  # JTAG_CTRL flags
  set PL_TAP_ENABLED 0x1
  set ARM_DAP_ENABLED 0x2

  # Wait for CBR to complete
  #
  # When the Zynq US+ first powers on, the Configuration BootROM (CBR) needs to run.
  # Attempting to enable the PL TAP and ARM DAP prior to the CBR completing
  # does not work.
  irscan $_CHIPNAME.ps_pl [ps_control $JTAG_STATUS]
  for { set _i 0 } { $_i < 10 } { incr i } {
    set status 0x[drscan $_CHIPNAME.ps_pl $JTAG_STATUS_WIDTH 0x0]
    if { [jtag_status_cbr_done $status] } {
      break
    } else {
      sleep 10
    }
  }

  if { ![jtag_status_cbr_done $status] } {
    error "CBR didn't boot"
  }

  # Read JTAG_STATUS from PS to determine JTAG taps need to re-enabled
  #
  set arm_dap [jtag_status_arm_dap $status]
  set pl_tap [jtag_status_pl_tap $status]
  if {$arm_dap == 0 || $pl_tap == 0} {
    puts "ARM and PL TAPs not enabled, attempting to enable (old status: $status)"

    irscan $_CHIPNAME.ps_pl [ps_control $JTAG_CTRL]
    drscan $_CHIPNAME.ps_pl $JTAG_CTRL_WIDTH [expr $ARM_DAP_ENABLED | $PL_TAP_ENABLED]]

    # Reset all TAPs on the JTAG chain to allow new TAPs to join the chain.
    for { set i 0 } { $i < 5 } { incr i } {
      adapter assert trst
      adapter deassert trst
    }

    puts "Verifying that TAPs are enabled!"
    irscan $_CHIPNAME.ps_pl [ps_control $JTAG_STATUS]
    set status 0x[drscan $_CHIPNAME.ps_pl $JTAG_STATUS_WIDTH 0x0]
    set arm_dap [jtag_status_arm_dap $status]
    set pl_tap [jtag_status_pl_tap $status]
    if {$arm_dap == 0 || $pl_tap == 0} {
      error "Failed to enable ARM DAP ($arm_dap) or PL TAP ($pl_tap), status: $status, check security settings?"
    }

    # Rescan chain now that ARM and PL TAPs are enabled.
    jtag arp_init
  } else {
    puts "ARM and PL TAPs are enabled, nothing needs to be done!"
  }
}

jtag configure $_CHIPNAME.ps_pl -event setup {
  # Make sure ARM DAP and PL TAP are enabled.
  check_and_enable_taps
}

set _TARGETNAME $_CHIPNAME.a53
set _CTINAME $_CHIPNAME.cti
set _smp_command ""

set _DBGBASE {0x80410000 0x80510000 0x80610000 0x80710000}
set _CTIBASE {0x80420000 0x80520000 0x80620000 0x80720000}
set _cores 4

for { set _core 0 } { $_core < $_cores } { incr _core } {

    cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $_CTIBASE $_core]

    set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $_DBGBASE $_core] -cti $_CTINAME.$_core"

    # All cores may fail to come up!
    # In some boot modes, all ARM cores are sleeping!
    set _command "$_command -defer-examine"
    if { $_core != 0 } {
        set _smp_command "$_smp_command $_TARGETNAME.$_core"
    } else {
        # uncomment when "hawt" rtos is merged
        #set _command "$_command -rtos hawt"
        set _smp_command "target smp $_TARGETNAME.$_core"
    }

    eval $_command
}

eval $_smp_command
targets $_TARGETNAME.0

# Perform a read-modify-write on the ARM DAP CSW register (0x0)
# CSW = (CSW & ~mask) | (value & maks)
proc dap_csw_mask_write { apidx value mask } {
  global _CHIPNAME
  set csw [$_CHIPNAME.dap apreg $apidx 0x0]
  set masked_csw [expr $csw & ~$mask]
  set new_csw [expr $masked_csw | ($value & $mask)]
  $_CHIPNAME.dap apreg $apidx 0x0 $new_csw
}

# Read a 32-bit value from the Zynq US+ AXI bus
# Uses ARM DAP 0, which is a AXI-DP.
proc read_axi_u32 {addr} {
  global _CHIPNAME
  # AXI is AP 0
  # Normal read/write, 32-bits, no auto-increment
  dap_csw_mask_write 0 0x2 0x1F37
  # Set address
  $_CHIPNAME.dap apreg 0 0x4 $addr
  # Read value
  return [string trim [$_CHIPNAME.dap apreg 0 0xC]]
}

# Write a 32-bit value from the Zynq US+ AXI bus
# Uses ARM DAP 0, which is a AHB-AP / AXI-AP.
proc write_axi_u32 {addr value} {
  global _CHIPNAME
  # AXI is AP 0
  # Normal read/write, 32-bits, no auto-increment
  dap_csw_mask_write 0 0x2 0x1F37
  # Set address
  $_CHIPNAME.dap apreg 0 0x4 $addr
  # Write value
  $_CHIPNAME.dap apreg 0 0xC $value
}

# Read a 32-bit value from the Zynq US+ Cortex A53 Debug bus
# Uses ARM DAP 1, which is a APB-AP, which has access to the Debug APB.
proc read_debug_u32 {addr} {
  global _CHIPNAME
  # Debug is AP 1
  # Normal read/write, 32-bits, no auto-increment
  dap_csw_mask_write 1 0x2 0x1F37
  # Set address
  $_CHIPNAME.dap apreg 1 0x4 $addr
  # Read value
  return [$_CHIPNAME.dap apreg 1 0xC]
}

# Write a 32-bit value from the Zynq US+ Cortex A53 Debug bus
# Uses ARM DAP 1, which is a APB-AP, which has access to the Debug APB.
proc write_debug_u32 {addr value} {
  global _CHIPNAME
  # Debug is AP 1
  # Normal read/write, 32-bits, no auto-increment
  dap_csw_mask_write 1 0x2 0x1F37
  # Set address
  $_CHIPNAME.dap apreg 1 0x4 $addr
  # Write value
  $_CHIPNAME.dap apreg 1 0xC $value
}

# Write an ABORT to the ARM DAP.
proc write_abort {} {
  global _CHIPNAME
  irscan $_CHIPNAME.arm 0x8
  drscan $_CHIPNAME.arm 35 0x8
}

# Read the CTRL_STAT register in the ARM DAP.
proc read_ctrl_stat {} {
  global _CHIPNAME
  return [$_CHIPNAME.dap dpreg 0x04]
}

# Write the CTRL_STAT register in the ARM DAP.
proc write_ctrl_stat { value } {
  global _CHIPNAME
  $_CHIPNAME.dap dpreg 0x04 $value
}

# Compute a debug address for the specified core.
# Assumes debug base address from _DBGBASE.
#
# TODO: Read DBGBASE from ARM DAP ROMs?
proc debug_address {core offset} {
  global _DBGBASE
  set core_debug_base [lindex $_DBGBASE $core]
  return [expr $core_debug_base + $offset]
}

# Perform a read-modify-write to an address on the AXI bus.
# AXI[addr] = (AXI[addr] & ~mask) | (value & mask).
proc axi_mask_write { addr mask value } {
  set value_in [read_axi_u32 $addr]
  set masked_value [expr $value_in & ~$mask]
  set new_value [expr $masked_value | ($value & $mask)]
  puts "axi_mask_write $addr $mask $value, read $value_in, new_value $new_value"
  write_axi_u32 $addr $new_value
}

# Read the IDCODE from the ARM DAP.
proc read_arm_dap_idcode {} {
  irscan uscale.arm 0xe
  return "0x[drscan uscale.arm 32 0]"
}

# Check if specified core is up, if so examine target. If core is powered down, power up!
#
# TODO: Only power on of core 0 is written.
proc core_up {core} {
  global _cores
  global _TARGETNAME
  global _DAP_TAPID

  # Make sure ARM DAP is powered on
  for { set _i 0 } { $_i < 4 } { incr _i } {
    if { [read_arm_dap_idcode] == $_DAP_TAPID } {
      break
    } else {
      sleep 10
      check_and_enable_taps
    }
  }

  if { ![read_arm_dap_idcode] == $_DAP_TAPID } {
    error "ARM DAP IDCODE cannot be read, check configuration?"
  }

  # Read EDPRSR (offset 0x314 from debug base address)
  # Table 11-11 Memory-mapped debug register summary from ARM DDI0500D
  set core_edprsr [read_debug_u32 [debug_address $core 0x314]]
  # Core Power up PU = EDPRSR[0]
  # Section H9.2.40 EDPRSR, External Debug Processor Status Register from ARM DDI0487F.a
  set core_pu [expr $core_edprsr & 0x1]
  if { $core_pu == 0x0 } {
    # Core is powered down, power it back up!
    puts "A53 Core $core is powered down, power it up"

    # Begin startup sequence.
    write_abort
    # - Clear error bits in DAP (0x33)
    # - Request power up of debug peripherals (0x10000000)
    # 2.3.2 CTRL/STAT, Control/Status register from ARM IHI 0031C
    write_ctrl_stat 0x10000033

    # Set "Reset catch" on target core to halt the core as soon as it powers on
    write_debug_u32 [debug_address $core 0x24] 0x2

    # Set initial jump instruction to "B 0", e.g. branch to self.
    write_axi_u32 0xFFFF0000 0x14000000

    # Ask CRF_APB to power on L2 cache and core 0
    # https://www.xilinx.com/html_docs/registers/ug1087/ug1087-zynq-ultrascale-registers.html
    # CRG_APB
    if { $core == 0 } {
      # Power on L2 cache, and reset core 0
      # RST_FPD_APU = 0x104
      # acpu0_reset = bit 0
      # apu_l2_reset = bit 8
      # acpu1_pwron_reset = bit 10
      axi_mask_write 0xFD1A0104 0x501 0x0
    } else {
      # TODO:
      error "Not implemented!"
    }

    # Maybe poll on something?
    sleep 100
  } else {
    puts "A53 Core $core is powered up, try to halt it!"
  }

  # Core is ready to be examined!
  $_TARGETNAME.$core arp_examine
}

# After reset, need to power up core 0 again!
$_TARGETNAME.0 configure -event reset-deassert-post {
  core_up 0
}
