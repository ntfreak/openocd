#
# Texas Instruments AM654x: http://www.ti.com/lit/pdf/spruid7
#

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME am654
}

if { [info exists AM6_JTAG_TAPID] } {
	set _AM6_DAP_TAPID $AM6_JTAG_TAPID
} else {
	set _AM6_DAP_TAPID 0x0bb5a02f
}

if { [info exists A53CHIPCORES] } {
    set _a53_cores $A53CHIPCORES
} else {
    set _a53_cores 4
}

if { [info exists R5CHIPCORES] } {
    set _r5_cores $R5CHIPCORES
} else {
    set _r5_cores 2
}

jtag newtap $_CHIPNAME cpu -irlen 4 -expected-id $_AM6_DAP_TAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu


set _TARGETNAME $_CHIPNAME.cpu

set _CTINAME $_CHIPNAME.cti

# CM3 the very first processor.
set CM3_DWTBASE		{0xE0001000}
set CM3_CTIBASE		{0x3C016000}
set CM3_ETBBASE		{0x3C025000}
set CM3_TPIUBASE	{0x20004000}

# M3 is always active, so keep it alive
cti create $_CTINAME.m3 -dap $_CHIPNAME.dap -ap-num 7 -ctibase [lindex $CM3_CTIBASE 0]
set _command "target create $_TARGETNAME.m3 cortex_m -dap $_CHIPNAME.dap -ap-num 7"
set _command "$_command -defer-examine"
eval $_command
$_TARGETNAME.m3 configure -event reset-assert { }

proc m3_up { args } {
	global _TARGETNAME
	global _CHIPNAME

	# To access M3, we need to enable the JTAG access for the same.
	# Ensure Power-AP unlocked
	$_CHIPNAME.dap apreg 3 0xf0 0x00190000
	$_CHIPNAME.dap apreg 3 0x50 0x00102098

        $_TARGETNAME.m3 arp_examine
}

# Two clusters, each with dual A53.
set A53_DBGBASE {0x90410000 0x90510000 0x90810000 0x90910000}
set A53_CTIBASE {0x90420000 0x90520000 0x90820000 0x90920000}
set A53_PMUBASE {0x90430000 0x90530000 0x90830000 0x90930000}
set A53_ETMBASE {0x90440000 0x90540000 0x90840000 0x90940000}

for { set _core 0 } { $_core < $_a53_cores } { incr _core } {

    cti create $_CTINAME.a53.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $A53_CTIBASE $_core]

    set _command "target create $_TARGETNAME.a53.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $A53_DBGBASE $_core] -cti $_CTINAME.a53.$_core"

    # On AM6, A53s do not come up by default. examination will fail
    set _command "$_command -defer-examine"
    if { $_core != 0 } {
        set _smp_command "$_smp_command $_TARGETNAME.a53.$_core"
    } else {
        set _smp_command "target smp $_TARGETNAME.a53.$_core"
    }

    eval $_command
}

proc a53_up { args } {
    global _TARGETNAME
    foreach { _core } [set args] {
        $_TARGETNAME.a53.$_core arp_examine
        $_TARGETNAME.a53.$_core aarch64 dbginit
    }
}

proc a53_smp { args } {
    global _TARGETNAME
    global _a53_cores
    for { set _core 0 } { $_core < $_a53_cores } { incr _core } {
        $_TARGETNAME.a53.$_core arp_examine
        $_TARGETNAME.a53.$_core aarch64 dbginit
        $_TARGETNAME.a53.$_core aarch64 smp on
    }
    aarch64 smp on
}

#	        (0)MCU 0   (1)MCU 1
set R5_DBGBASE {0x9d010000 0x9d012000 }
set R5_CTIBASE {0x9d018000 0x9d019000 }
set R5_ETMBASE {0x9d01c000 0x9d01d000 }

for { set _core 0 } { $_core < $_r5_cores } { incr _core } {
    cti create $_CTINAME.r5.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $R5_CTIBASE $_core]
    set _command "target create $_TARGETNAME.r5.$_core cortex_r4 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $R5_DBGBASE $_core] -ap-num 1"
        # non-boot core examination may fail - wait till startup of additional core
    set _command "$_command -defer-examine"

    eval $_command
}

# Lockstep processors will NOT have CPU1 active
proc mcu_r5_up { args } {
    global _TARGETNAME
    set _base_core_id 0
    foreach { _core } [set args] {
	set _core [expr {$_core + $_base_core_id}]
        $_TARGETNAME.r5.$_core arp_examine
        $_TARGETNAME.r5.$_core cortex_r4 dbginit
    }
}
